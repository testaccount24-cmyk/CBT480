* ----------------------------------------------------------------- *
*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *
*                                                                   *
*                      "PRETTIFIED BY SAM GOLOB"                    *
*                      "IMPROVED BY WARREN WHITFORD"                *
*                                                                   *
*        Level 007 -   Introduce selection criteria to copy only    *
*         (Nov 2011)   part of a file by counting records.          *
*                      If SYSIN DD is present, the program looks    *
*                      for SKIP=mmmmmmm or COPY=nnnnnnn or both,    *
*                      starting in column 1, to first skip mmmmmmm  *
*                      records in the file, and then copy the next  *
*                      nnnnnnn records afterwards.  (S.Golob)       *
*                                                                   *
*         (Nov 2017)   When the number in SKIP=, or COPY=, was      *
*                      greater than 2,147,483,647 then the CVB      *
*                      instruction (which is really not necessary   *
*                      for the comparisons, because the packed      *
*                      values are used for comparisons) goes down   *
*                      with a S0C9 abend.  This is bypassed in the  *
*                      code.  That opens us up to a problem when    *
*                      many more than 10 digits were coded.  And    *
*                      we solve that by replacing B NUMBRGNM by a   *
*                      BCT R6,NUMBRGNM, with R6 preset to 10.       *
*                      This limits the number of numeric digits     *
*                      searched for, to 10, and no more.            *
* ----------------------------------------------------------------- *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R7,HEX
         LM    R15,R1,HEXSAVE
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         GBLC  &LLEV
&LLEV    SETC  '007'
*
CKIEBGEN CSECT
         YREGS
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '
         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '
         DC    C'LEVEL &LLEV '
         DC    C'--- '            MAKE EYECATCHER VISIBLE
SAVEAREA DC    18F'0'
EYECATCH DS    0H             ENSURE ALIGNMENT
         SAVE  (14,12)
         LR    R5,R1          SAVE PARM POINTER
         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR
         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR
         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR
         LR    R13,R1               NEW SAVE AREA ADDRESS
         DROP  R15
* -----                       SET UP TWO BASE REGISTERS
         USING CKIEBGEN,R12,R11,R10
         LR    R12,R15
         LR    R11,R12
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LA    R10,4095(,R11)
         LA    R10,1(,R10)
         LR    R1,R5          RESTORE PARM POINTER
         PRINT GEN
***********************************************************************
* GET SYSTEM DATE AND TIME                                            *
***********************************************************************
         STM   R14,R2,SAVE1402
         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY
         OI    DATE+4,X'0F'
         UNPK  DATED,DATE
         OI    TIME+3,X'0F'
         UNPK  TIMED,TIME
*                          FILL HEADDATE AREA WITH INFO TO REUSE
         MVC   HEADDATE(2),DATED
         MVI   HEADDATE+2,C'/'
         MVC   HEADDATE+3(2),DATED+2
         MVI   HEADDATE+5,C'/'
         MVC   HEADDATE+6(4),DATED+4
         MVC   HEADDATE+12(2),TIMED
         MVI   HEADDATE+14,C':'
         MVC   HEADDATE+15(2),TIMED+2
         MVI   HEADDATE+17,C':'
         MVC   HEADDATE+18(2),TIMED+4
         MVC   HEADER+54(23),HEADDATE
         MVI   HEADER+38,C'-'
         MVC   HEADER+40(6),=C'LEVEL '
         MVC   HEADER+46(3),=C'&LLEV'
         LM    R14,R2,SAVE1402
***********************************************************************
* ------------------------------------------------------------------- *
INITCON  DS    0H
         MVI   FLAGSYSN,X'00'       Initialize SYSIN flag.
* ------------------------------------------------------------------- *
         OPEN  (SYSPRINT,OUTPUT)
         BAL   R7,TIOTSCAN          Scan if SYSIN DD is there.
         TM    FLAGSYSN,X'01'       Is SYSIN DD there?
         BZ    NOSYSIN              No. Just copy the entire file.
         BAL   R7,DOSYSIN           Yes. Process the cards.
NOSYSIN  DS    0H
PRLMJFCB DS    0H                   Preliminary RDJFCB to determine
*                                   available DCB field information.
*--------
         MVC   OUTLINE,OUTLINE-1    Print program header.
         MVC   OUTLINE(133),HEADER
         PUT   SYSPRINT,OUTLINE
* -------
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE(133),HEADERJ
         PUT   SYSPRINT,OUTLINE
* -------                           OPEN input and output files.
         OPEN  (SYSUT1,(INPUT))
         OPEN  (SYSUT2,(OUTPUT))
         RDJFCB SYSUT1
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGDSN
         MVI   OUTLINE+11,C'1'            SYSUT1
         BAL   R7,PRTJFCB           Print available information.
         RDJFCB SYSUT2
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGDSN
         MVI   OUTLINE+11,C'2'            SYSUT2
         BAL   R7,PRTJFCB           Print available information.
         TM    FLAG1,X'07'          No problems? Not missing info?
         BZ    GO                   Then go copy the file.
         B     ABSTART
* ------------------------------------------------------------------- *
GO       DS    0H
         ZAP   INRCDS,=P'0'               Initialize counters.
         ZAP   OUTRCDS,=P'0'
         ZAP   SKIPRCDS,=P'0'
         ZAP   COPYRCDS,=P'0'
* ------------------------------------------------------------------- *
READWRIT DS    0H                         Main processing loop.
         TM    INVNFLG,X'01'              Invalid SKIP or COPY?
         BO    FIN                        Yes. Error. Do nothing.
*
         GET   SYSUT1,AREA                Get a new record.
         AP    INRCDS,=P'1'               Count it as incoming.
         TM    SKIPFLG,X'01'              Was SKIP coded?
         BO    CNTSKIP                    Yes. Handle the skipping.
         TM    SKIPFLG,X'02'              Was COPY coded?
         BO    CNTCOPY                    Yes. Handle that.
         B     PUTITOUT                   Neither. Copy all records.
*
CNTSKIP  DS    0H                         Handle record skipping
         CP    PKSKIP,INRCDS              Have we exceeded threshold?
         BL    CNTCOPY                    Yes. See if copy was coded.
         AP    SKIPRCDS,=P'1'             No. Count this skipped rcrd.
         B     READWRIT                   And get another one.
*
CNTCOPY  DS    0H                         Handle subsequent copy.
         TM    SKIPFLG,X'02'              Was COPY coded?
         BZ    CNTCOPYA                   No. Then there's no limit.
         CP    PKCOPY,COPYRCDS            Limit exceeded?
         BNH   FIN                        Yes. Get out altogether.
CNTCOPYA DS    0H
         AP    COPYRCDS,=P'1'             Count record copied.
PUTITOUT DS    0H                         And actually copy it.
         PUT   SYSUT2,AREA
         AP    OUTRCDS,=P'1'              Output record count.
         B     READWRIT                   Loop back. Get another record
* -------
FIN      DS    0H                         Summary report and Exit.
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE(133),MSG01
         MVC   OUTLINE+19(12),EDPAT
         ED    OUTLINE+19(12),INRCDS+2    Number of records input
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE(133),MSG02
         MVC   OUTLINE+19(12),EDPAT
         ED    OUTLINE+19(12),OUTRCDS+2   Number of records output
         PUT   SYSPRINT,OUTLINE
         TM    SKIPFLG,X'03'              Were SKIP= or COPY= coded?
         BZ    GOCLOSE                    No. Extra print unnecessary.
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE(133),MSG03
         MVC   OUTLINE+19(12),EDPAT
         ED    OUTLINE+19(12),SKIPRCDS+2  Number of records skipped
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE(133),MSG04
         MVC   OUTLINE+19(12),EDPAT
         ED    OUTLINE+19(12),COPYRCDS+2  Number of records copied
         PUT   SYSPRINT,OUTLINE
GOCLOSE  DS    0H                        Close input and output files
         CLOSE SYSUT1
         CLOSE SYSUT2
* -------
THEEND   DS    0H                        Return
         CLOSE SYSPRINT
         L     R13,4(,R13)
         RETURN (14,12),RC=0
         EJECT
* ------------------------------------------------------------------- *
*  Come here if not enough DCB attributes to feed QSAM to make a copy.
* ------------------------------------------------------------------- *
ABSTART  DS    0H                        Missing DCB attributes....
         CLOSE SYSUT1
         CLOSE SYSUT2
         MVC   OUTLINE,OUTLINE-1         Tell em....
         MVC   OUTLINE(133),ABENDMSG
         PUT   SYSPRINT,OUTLINE
         B     THEEND
* ------------------------------------------------------------------- *
* ------------------------------------------------------------------- *
*                 S  U  B  R  O  U  T  I  N  E  S                     *
* ------------------------------------------------------------------- *
* ------------------------------------------------------------------- *
* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *
* ------------------------------------------------------------------- *
PRTJFCB  DS    0H
         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGMBR
         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGVOLSR           VOLSER
         MVC   OUTLINE+19(6),JFCBVOLS
         MVC   OUTLINE+26(6),JFCBVOLS+6
         MVC   OUTLINE+33(6),JFCBVOLS+12
         MVC   OUTLINE+40(6),JFCBVOLS+18
         MVC   OUTLINE+47(6),JFCBVOLS+24
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGDSORG          DSORG
         MVC   OUTLINE+19(3),=C'IS '
         CLI   JFCDSRG1,JFCORGIS
         BE    PUTDSRG
         MVC   OUTLINE+19(3),=C'ISU'
         CLI   JFCDSRG1,JFCORGIS+JFCORGU
         BE    PUTDSRG
         MVC   OUTLINE+19(3),=C'PS '
         CLI   JFCDSRG1,JFCORGPS
         BE    PUTDSRG
         MVC   OUTLINE+19(3),=C'PSU'
         CLI   JFCDSRG1,JFCORGPS+JFCORGU
         BE    PUTDSRG
         MVC   OUTLINE+19(3),=C'DA '
         CLI   JFCDSRG1,JFCORGDA
         BE    PUTDSRG
         MVC   OUTLINE+19(3),=C'DAU'
         CLI   JFCDSRG1,JFCORGDA+JFCORGU
         BE    PUTDSRG
         MVC   OUTLINE+19(3),=C'PO '
         CLI   JFCDSRG1,JFCORGPO
         BE    PUTDSRG
         MVC   OUTLINE+19(3),=C'POU'
         CLI   JFCDSRG1,JFCORGPO+JFCORGU
         BE    PUTDSRG
         OI    FLAG1,X'01'                FLAG DSORG MISSING
         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'
PUTDSRG  PUT   SYSPRINT,OUTLINE
RECFM    DS    0H
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGRECFM           RECFM
         LA    R4,OUTLINE+19
         TM    JFCRECFM,JFCUND
         BNO   NOTUND
         MVI   0(R4),C'U'
         OI    FLAG2,X'01'                FLAG RECFM=U
         A     R4,ONE
         B     CHKB
NOTUND   TM    JFCRECFM,JFCFIX
         BNO   NOTFIX
         MVI   0(R4),C'F'
         A     R4,ONE
NOTFIX   TM    JFCRECFM,JFCVAR
         BNO   CHKB
         MVI   0(R4),C'V'
         A     R4,ONE
CHKB     TM    JFCRECFM,JFCRFB
         BNO   NOTBLK
         MVI   0(R4),C'B'
         A     R4,ONE
NOTBLK   TM    JFCRECFM,JFCRFS
         BNO   NOTSCN
         MVI   0(R4),C'S'
         A     R4,ONE
NOTSCN   TM    JFCRECFM,JFCASA
         BNO   NOTASA
         MVI   0(R4),C'A'
         A     R4,ONE
NOTASA   TM    JFCRECFM,JFCMAC
         BNO   PUTRCFM
         MVI   0(R4),C'M'
PUTRCFM  PUT   SYSPRINT,OUTLINE
LRECL    DS    0H
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGLRECL
         SR    R4,R4
         LH    R4,JFCLRECL
         C     R4,=F'0'
         BNE   LRECPRT
         TM    FLAG2,X'01'                IS RECFM=U?
         BO    LRECPRT                    YES-0 IS LEGITIMATE
         OI    FLAG1,X'04'
         MVC   OUTLINE+19(7),=C'MISSING'
         B     LRECPUT
LRECPRT  DS    0H
         CVD   R4,DECVALUE
         MVC   OUTLINE+19(12),EDPAT       LRECL
         ED    OUTLINE+19(12),DECVALUE+3
LRECPUT  PUT   SYSPRINT,OUTLINE
BLKSIZE  MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE,MSGBLKSZ
         SR    R4,R4
         LH    R4,JFCBLKSI
         C     R4,=F'0'
         BNE   BLKSIZEG                   BLOCK SIZE IS GOOD
         OI    FLAG1,X'02'                FLAG BLKSIZE MISSING
         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'
         B     BLKSZPUT
BLKSIZEG CVD   R4,DECVALUE
         MVC   OUTLINE+19(12),EDPAT       BLKSIZE
         ED    OUTLINE+19(12),DECVALUE+3
BLKSZPUT PUT   SYSPRINT,OUTLINE
         BR    R7
* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *
* ----------------------------------------------------------------- *    06223
TIOTSCAN DS    0H             Determine the presence of Optional         06224
*                             DDNAME:   SYSIN                            06225
* ----->                      OPEN SYSIN if there is JCL for it.         06226
* ----------------------------------------------------------------- *    06227
         ST    R7,SAVER7TT    SAVE BAL REGISTER
         ST    R3,SAVER3TT    SAVE WORK REGISTERS
         ST    R5,SAVER5TT
         L     R5,16          R5=CVT                                     06228
         L     R5,0(,R5)      R5=TCB WORDS                               06229
         L     R5,4(,R5)      R5=MY TCB                                  06230
         L     R5,12(,R5)     R5=TIOT                                    06231
         LA    R5,24(,R5)     R5=FIRST DD ENTRY                          06232
TIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?                             06233
         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES        06234
TIOTSYSN CLC   4(8,R5),SYSIN+40                                          06239
         BNE   TIOTNEXT                                                  06240
         OI    FLAGSYSN,X'01'       SHOW PRESENCE OF SYSIN    DD         06241
         B     TIOTNEXT                                                  06242
TIOTNEXT SR    R3,R3                                                     06243
         IC    R3,0(,R5)      R3=LENGTH OF DD ENTRY                      06244
         AR    R5,R3          R5=NEXT DD ENTRY                           06245
         B     TIOTLOOP       GO CHECK IT                                06246
TIOTSEND DS    0H                                                        06247
         L     R3,SAVER3TT    RESTORE WORK REGISTERS
         L     R5,SAVER5TT
         L     R7,SAVER7TT    RESTORE BAL REGISTER
         BR    R7             R7 IS THE BAL REGISTER
* ----------------------------------------------------------------- *    06227
SAVER3TT DS    F
SAVER5TT DS    F
SAVER7TT DS    F
FLAGSYSN DC    X'00'
* ------------------------------------------------------------------ *   06227
*                  PROCESS THE SYSIN RECORDS                         *
* ------------------------------------------------------------------ *
DOSYSIN  DS    0H                        Process SYSIN records.
         ST    R7,SAVER7SY
         TM    FLAGSYSN,X'01'            Is SYSIN DD name in JCL?
         BZ    SYSINENX                  No. Skip this entire section.
         OPEN  (SYSIN,(INPUT))
         STM   R3,R4,SAVE34              Save the work registers.
         MVC   BLNKLINE,BLNKLINE-1       Clear blank line
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(26),=C'   Display SYSIN Cards     '
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(26),=C'   ------- ----- -----     '
         PUT   SYSPRINT,OUTLINE
SYINLOOP DS    0H                        Read all the SYSIN cards.
         GET   SYSIN,INSYSIN             GET a card.
         MVC   WRKSYSIN(80),INSYSIN      Make a copy of it.
         OC    WRKSYSIN,BLNKLINE         Uppercase the copy.
         LA    R3,WRKSYSIN               Point R3 to the uppercased.
         LA    R4,INSYSIN                Point R4 to the original.
* ------------------------------------------------------------------ *
*           DISPLAY SYSIN CARDS AS THEY WILL BE LOOKED AT            *
* ------------------------------------------------------------------ *
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+4(80),WRKSYSIN    Move uppercased card image.
         PUT   SYSPRINT,OUTLINE
* ------------------------------------------------------------------ *
*           Test the uppercased card for keywords                    *
*           And afterwards do the proper displacements               *
* ------------------------------------------------------------------ *
         CLC   =C'COPY= ',0(R3)           COPY= followed by space?
         BE    SYINLOOP                   No number there, so ignore.
         CLC   =C'SKIP= ',0(R3)           SKIP= followed by space?
         BE    SYINLOOP                   No number there, so ignore.
         CLC   =C'COPY=',0(R3)            COPY= keyword?
         BE    HCOPY                      Yes. Handle it.
         CLC   =C'SKIP=',0(R3)            SKIP= keyword?
         BE    HSKIP                      Yes. Handle it.
         B     SYINLOOP
HCOPY    DS    0H                         Handle COPY=
         OI    SKIPFLG,X'02'              Indicate its presence.
         LA    R4,5(,R4)                  Point to the number.
         LA    R3,5(,R3)
         BAL   R7,NUMBRGET                Extract the number.
         MVC   CHCOPY(10),CHARNUM         Display value
         MVC   BICOPY(4),BINVALUE         Binary  value
         TM    INVNFLG,X'01'              INVALID?
         BO    HNZCOPY                    DON'T PACK IF INVALID !!
         ZAP   PKCOPY,PACKNUM             Packed  value
HNZCOPY  DS    0H
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINET(7),=C'COPY=  '
         HEX   OUTLINE+29,4,BICOPY
         MVC   OUTLINE+45(8),=C'Decimal:'
         MVC   OUTLINE+55(10),CHCOPY
         TM    NUMCFLG,X'01'
         BZ    HCOPYGD
         MVC   OUTLINE+66(15),=C'INVALID NUMERIC'
HCOPYGD  DS    0H
*        PUT   SYSPRINT,OUTLINE
         B     SYINLOOP                   Look for next card.
*
HSKIP    DS    0H                         Handle SKIP=
         OI    SKIPFLG,X'01'              Indicate its presence.
         LA    R4,5(,R4)                  Bump the pointers.
         LA    R3,5(,R3)
         BAL   R7,NUMBRGET                Extract the number.
         MVC   CHSKIP(10),CHARNUM         Display value
         MVC   BISKIP(4),BINVALUE         Binary  value
         TM    INVNFLG,X'01'              INVALID?
         BO    HNZSKIP                    DON'T PACK IF INVALID !!
         ZAP   PKSKIP,PACKNUM             Packed  value
HNZSKIP  DS    0H
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINET(7),=C'SKIP=  '
         HEX   OUTLINE+29,4,BISKIP
         MVC   OUTLINE+45(8),=C'Decimal:'
         MVC   OUTLINE+55(10),CHSKIP
         TM    NUMCFLG,X'01'
         BZ    HSKIPGD
         MVC   OUTLINE+66(15),=C'INVALID NUMERIC'
HSKIPGD  DS    0H
*        PUT   SYSPRINT,OUTLINE
         B     SYINLOOP                   Look for next card.
SYSINEND DS    0H
         MVC   OUTLINE,OUTLINE-1
*        PUT   SYSPRINT,OUTLINE
* ----- >
         CLOSE (SYSIN)
         LM    R3,R4,SAVE34
SYSINENX DS    0H
         MVC   OUTLINE,OUTLINE-1
         PUT   SYSPRINT,OUTLINE
         L     R7,SAVER7SY
         BR    R7
*------------------------  Constants needed for this routine -----*
SAVE34   DS    2F
SAVER7SY DS    F
INSYSIN  DC    CL80' '
WRKSYSIN DC    CL80' '
         DC    X'40'
BLNKLINE DC    CL80' '
CHCOPY   DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854
BICOPY   DS    F                 FULLWORD BINARY NUMBER
PKCOPY   DS    PL8
CHSKIP   DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854
BISKIP   DS    F                 FULLWORD BINARY NUMBER
PKSKIP   DS    PL8
*-----------------------------------------------------------------*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Routine to get the numeric values from the SYSIN keywords.  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NUMBRGET DS    0H                                                        06454
         ST    R7,SAVER7NG          Save BAL register.
         ST    R4,SAVER4A           Save address of number in original
         ST    R3,SAVER3A           Save address of number in copy
         NI    NUMCFLG,X'FF'-X'01'  Turn off "not numeric" flag.
         MVC   CHARNUM(10),BLNKLINE   Initialize character field
         XC    BINVALUE,BINVALUE      Clear binary value
         LA    R6,10                Limit search to 10 digits.
* ----------------------------------------------------------------- *
*    Upon entry, R4 points to "number" in original.
*    Upon entry, R3 points to "number" in copy.
* ----------------------------------------------------------------- *
         CLI   0(R4),C' '        Is the first number value blank?        06455
         BE    NUMBRCLG          Yes. Ignore the entire card.            06456
* --
* ----------------------------------------------------------------- *
*    At this point, we are looking at the first character after     *
*     the particular keyword, and we want to test it and extract    *
*     its value.                                                    *
* ----------------------------------------------------------------- *
         CLI   0(R4),X'F0'       Smaller than character 0?               06457
         BL    NUMBRNVL          Yes. Mark as invalid.                   06458
         CLI   0(R4),X'F9'       Bigger than 9?                          06459
         BH    NUMBRNVL          Yes. Mark as invalid.                   06460
         B     NUMBRVLD          Didn't fail, consider the number valid
*                   Remember that R4 is start address for "number".
NUMBRNVL DS    0H                Mark the character as invalid number.   06464
         OI    NUMCFLG,X'01'     Set "invalid flag" for this number.
         OI    INVNFLG,X'01'     Show there's an invalid number coded.
         MVI   0(R4),C'*'        Mark invalid digit in the report.
NUMBRVLD DS    0H                                                        06464
* ----------------------------------------------------------------- *
NUMBRNUM DS    0H                Loop to extract the number.             06464
         LA    R4,1(,R4)         Bump R4 to point to next character.     06465
         C     R4,INSYSIN+71     End of card?                            06466
         BH    NUMBRGNM          Yes, Get number.                        06467
         CLI   0(R4),C' '        Blank here?                             06468
         BE    NUMBRGNM          Yes, Get number.                        06469
** ----- >>   Validity Check - below
* --
         CLI   0(R4),X'F0'       Smaller than C'0'?
         BL    NUMBINVL          Yes. Mark as invalid.
         CLI   0(R4),X'F9'       Bigger than C'9'?
         BH    NUMBINVL          Yes. Mark as invalid.
         B     NUMBVALD          None of above, don't mark invalid.
NUMBINVL DS    0H                Mark the character as invalid number.   06464
         OI    NUMCFLG,X'01'     Set "invalid flag" for this number.
         OI    INVNFLG,X'01'     Show there's an invalid number coded.
         MVI   0(R4),C'*'        Mark invalid digit in the report.
NUMBVALD DS    0H                                                        06464
** ----- >>   Validity Check - above
         BCT   R6,NUMBRNUM       Step up one place. (Limit 10 digits)    06470
* ----------------------------------------------------------------- *
NUMBRGNM DS    0H                                                        06471
         L     R2,SAVER4A        Load R2 with address of number start
         SR    R4,R2             How big is the number?                  06472
         BCTR  R4,0              Lower by one for EXECUTE.               06473
         TM    NUMCFLG,X'01'     Was any digit of the number invalid?
         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.
         TM    INVNFLG,X'01'     Was any digit of the number invalid?
         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.
         XC    PACKWORK,PACKWORK   Clear the doubleword work area.
         EX    R4,PACKIT         Pack the number into work area.         06474
*        MVC   OUTLINE,OUTLINE-1
*        HEX   OUTLINE+20,8,PACKWORK     Test display
*        PUT   SYSPRINT,OUTLINE
         ZAP   PACKNUM,PACKWORK
*        MVC   OUTLINE,OUTLINE-1
*        HEX   OUTLINE+20,8,PACKNUM      Test display
*        PUT   SYSPRINT,OUTLINE
NUMBRNPK DS    0H                                                        06471
         MVC   CHARNUM(10),BLNKLINE   Clear the display area.
         EX    R4,MVNUMBER       Move the display value to display.      06476
         TM    NUMCFLG,X'01'     Was any digit of the number invalid?
         BO    NUMBRCLG          Yes, don't try to convert it. S0C7.
* ----------------------------------------------------------------- *
*      Prevent S0C9 abend if binary number exceeds X'7FFFFFFF'      *
* ----------------------------------------------------------------- *
         CP    PACKWORK,=P'2147483647'   Saves S0C9 for big number
         BH    NUMBRCLG          CVB has upper limit of X'7FFFFFFF'
         CVB   R0,PACKWORK       Convert the packed version to binary.   06477
         ST    R0,BINVALUE       Store the binary value for later use.   06478
NUMBRCLG DS    0H                                                        06479
         L     R3,SAVER3A
         L     R7,SAVER7NG       Restore BAL register.
         BR    R7                                                        06480
* ----------------------------------------------------------------- *
PACKIT   PACK  PACKWORK,0(0,R2)      <<< EXECUTED >>>                    06759
MVNUMBER MVC   CHARNUM(0),0(R2)      <<< EXECUTED >>>                    06767
SAVER7NG DS    F
SAVER3A  DS    F
SAVER4A  DS    F
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PACKWORK DC    D'0'              PACK WORK AREA
CHARNUM  DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854
BINVALUE DS    F                 FULLWORD BINARY NUMBER
PACKNUM  DS    PL8
NUMCFLG  DS    X
INVNFLG  DS    X
SKIPFLG  DC    X'00'
*-----------------------------------------------------------------*
HEX      DS    0H                                                        04224
         ST    R7,SAV7HEX
         MVC   1(1,R15),0(R1)        Move byte                           04225
         UNPK  0(3,R15),1(2,R15)     Unpack                              04226
         TR    0(2,R15),HEXTAB-240                                       04227
         LA    R15,2(,R15)           Increment output pointer            04228
         LA    R1,1(,R1)             Increment input pointer             04229
         BCT   R0,HEX                Decrement length, then loop         04230
         MVI   0(R15),C' '           Blank the trailing byte             04231
         L     R7,SAV7HEX
         BR    R7                    Return to caller                    04232
HEXTAB   DC    C'0123456789ABCDEF'   Translate table                     04233
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAV7HEX  DC    F'0'
         SPACE                                                           04234
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*-----------------------------------------------------------------*
*
* ----- WORK AREA ------ *
FLAG1    DC    X'00'
*              X'01'          DSORG IS MISSING
FLAG2    DC    X'00'
* ----- CONSTANTS ------ *
PKZERO   DC    PL8'0'
ONE      DC    F'1'
DECVALUE DS    CL8
EDPAT    DC    X'402020206B2020206B202120'
         DC    C' '
BLANKS   DC    CL133' '
OUTLINE  DS    CL133
OUTLINET EQU   OUTLINE+7
HEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'
         DC    CL133' '
HEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '
         DC    CL133' '
MSGDSN   DC    CL133'-     SYSUTX DSN ='
         DC    CL133' '
MSGVOLSR DC    CL133'         VOLSER  ='
         DC    CL133' '
MSGMBR   DC    CL133'         MEMBER  ='
         DC    CL133' '
MSGDSORG DC    CL133'         DSORG   ='
         DC    CL133' '
MSGBLKSZ DC    CL133'         BLKSIZE ='
         DC    CL133' '
MSGLRECL DC    CL133'         LRECL   ='
         DC    CL133' '
MSGRECFM DC    CL133'         RECFM   ='
         DC    CL133' '
MSG01    DC    CL133'-    RECORDS  IN ='
         DC    CL133' '
MSG02    DC    CL133'     RECORDS OUT ='
         DC    CL133' '
MSG03    DC    CL133'     SKIPPED     ='
         DC    CL133' '
MSG04    DC    CL133'     COPIED      ='
         DC    CL133' '
ABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '
         DC    CL133' '
INRCDS   DC    PL7'0'
OUTRCDS  DC    PL7'0'
SKIPRCDS DC    PL7'0'
COPYRCDS DC    PL7'0'
         LTORG
SYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1
SYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA
SYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X
               EODAD=SYSINEND
         DC    CL8' '
SAVE1402 DS    6F                 ONE MORE FOR SAFETY
TIMED    DS    CL7
DATED    DS    CL9
DATETIME DS    4F
         ORG   DATETIME
TIME     DS    CL4
         DS    CL4
DATE     DS    CL5
         DS    CL3
HEADDATE DC    CL23' '
         DC    CL8' '
         DS    0F
JFCB1    DC    X'87'
         DC    AL3(INFMJFCB)
         IEFJFCBN LIST=YES
AREA     DS    CL32768
         END   CKIEBGEN
